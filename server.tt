use 'module:undertow/http' with
  'java:io.undertow' stand-alone
  'java:io.undertow.server' stand-alone
  'java:io.undertow.util' stand-alone
provided

//include 'rps'
include 'rpsts'

include 'json'

data value <>

def rpsService: $GameService;

templates convertRpsResult
  when <´´ =''> do {statusCode: 404} !
  when <´´ '.*'> do {statusCode: 400, body: $} !
  otherwise
    {body: $ -> serialize,
    headers:[{header:'Content-Type', value:'application/json'}]} !
end convertRpsResult

composer toInt
  <INT>
end toInt

processor CreateGameHandler
  templates handleRequest
    $.body -> parse -> rpsService::createGame -> convertRpsResult !
  end handleRequest
end CreateGameHandler

processor GetGameStatusHandler
  templates handleRequest
    def id: $.parameters... -> \(<{key: <='id'>}> $.value(1) !\) -> toInt;
    $rpsService::getStatus&{id: $id} -> convertRpsResult !
  end handleRequest
end GetGameStatusHandler

processor UpdateGameHandler
  templates handleRequest
    def id: $.parameters... -> \(<{key: <='id'>}> $.value(1) !\) -> toInt;
    $.body -> parse -> rpsService::updateGame&{id: $id} -> convertRpsResult !
  end handleRequest
end UpdateGameHandler

data uri-pattern <'(\/(\w+|\{\w+\}))+'>,
  routing <{post: <uri-pattern>, handler: <>}|{get: <uri-pattern>, handler: <handler>}>

def config: [{post: uri-pattern´'/games', handler: $CreateGameHandler},
  {get: uri-pattern´'/games/{id}', handler: $GetGameStatusHandler},
  {post: uri-pattern´'/games/{id}', handler: $UpdateGameHandler}
];

$config -> !http/startServer&{port: 8080, name: 'localhost'}
