sink sendResult&{exchange:}
  def result: {statusCode: 200, headers: [], body: '', $...};
  $result.statusCode::raw -> exchange::setStatusCode -> !VOID
  def headers: $exchange::getResponseHeaders;
  $result.headers... -> [$.header::raw -> util/HttpString, $.value::raw] -> headers::put -> !VOID
  def sender: $exchange::getResponseSender;
  $result.body::raw -> !sender::send
end sendResult

templates getParameters
  [ $::getQueryParameters -> $::entrySet ... -> {key: $::getKey, value: [$::getValue...]} ] !
end getParameters

processor BodyReceiver&{service:}
  sink handle
    def exchange: $(1);
    { parameters: $exchange -> getParameters,
      body: $(2) } -> service::handleRequest -> !sendResult&{exchange: $exchange}
  end handle
end BodyReceiver

processor PostHandler
  @: $;
  templates handleRequest
    def receiver: $::getRequestReceiver;
    $BodyReceiver&{service: $@PostHandler} -> !receiver::receiveFullString
  end handleRequest
end PostHandler

processor GetHandler
  @: $;
  templates handleRequest
    def exchange: $;
    { parameters: $exchange -> getParameters } -> @GetHandler::handleRequest -> !sendResult&{exchange: $exchange}
  end handleRequest
end GetHandler

templates createHandler
  def router: $server/RoutingHandler;
  $... -> \(<{post: <>}> $!\) -> [$.post::raw, $.handler -> PostHandler] -> router::post -> !VOID
  $... -> \(<{get: <>}> $!\) -> [$.get::raw, $.handler -> GetHandler] -> router::get -> !VOID
  $router !
end createHandler

source createServer&{port:,name:}
  def builder: $undertow/Undertow::builder;
  def b1: [$port, $name] -> builder::addHttpListener;
  def b2: $ -> b1::setHandler;
  $b2::build !
end createServer
