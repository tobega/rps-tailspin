data player <{name: <'.+'> VOID}|{name: <name>, move: <'.+'> VOID}>
data players <[<player>+ VOID](1..2)>

def moves: [move´'rock', move´'paper', move´'scissors', move´'spock', move´'lizard'];
// returns an array containing the index of the input move,
// or an empty array if the input move was not found
templates findMoveIndex
  def move: $;
  $moves -> \[j](<=$move> $j !\) !
end findMoveIndex

templates getWinner
  def players: $;
  $ -> \[i]($.move -> findMoveIndex ... ! \)
    -> ($moves::length + $(1) - $(2)) mod $moves::length
    -> #

  when <=0> do
    'It''s a tie' !

  otherwise
    '$players(($ + 1) mod 2 + 1).name; wins' !
end getWinner

test 'rock, paper, scissors result'
  assert [$moves... -> [{name: 'A', move: $}, {name: 'B', move: $}] ->
    getWinner] <[<='It''s a tie'>+ VOID]> 'Same move is a tie'

  assert [1..$moves::length -> [{name: 'A', move: $moves($)}, {name: 'B', move: $moves($ mod $moves::length + 1)}] ->
    getWinner] <[<='B wins'>+ VOID]> 'One above wins'

  assert [1..$moves::length -> [{name: 'A', move: $moves($)}, {name: 'B', move: $moves(($+1) mod $moves::length + 1)}] ->
    getWinner] <[<='A wins'>+ VOID]> 'Two above loses'
end 'rock, paper, scissors result'

processor GameService
  data hasMove <{move: <>}> local
  @: id´1:[];

  source getStatus&{id:}
    templates describeStatus
      // players array contains two players with moves
      when <{players: <[<hasMove>=2]>}> do
        (status: '$.players -> getWinner;') ! (players: $.players) !

      // there is currently only one player
      when <{players: <[](1)>}> do
        (status: '$.players(1).name; is waiting for an opponent') !

      otherwise
        $.players -> \[i](
          <~hasMove> $.name ! 'and' !
        \) -> $(1..last-1)
          -> (status: 'Waiting for $... -> '$; ';to move') !
    end describeStatus

    $id -> #
    when <$@GameService::first..$@GameService::last>
      {id: $id, $@GameService($id) -> describeStatus, legalMoves: $moves} !
    otherwise '' !
  end getStatus

  templates createGame
    when <~{name: <'.+'>}> do 'Please give a name' !

    when <hasMove ?($.move -> findMoveIndex <=[]>)> do
      '$.move; is not a recognized move. Please pick one of $moves;' !

    otherwise
      { players: [{name: $.name, $ -> \(<hasMove> $.move !\) -> (move: $)}]} -> ..|@GameService: $;
      $getStatus&{id:$@GameService::length}  !
  end createGame

  templates updateGame&{id:}
    when <?($id <$@GameService::first..$@GameService::last>)> do
      def game: $@GameService($id);
      $ -> \(
        // players array contains two players with moves
        when <?($game <{players: <[<hasMove>=2]>}>)> do
          'This game is already finished' !

        when <{move: <?($ -> findMoveIndex <=[]>)>}> do
          '$.move; is not a recognized move. Please pick one of $moves;' !

        // input does not have a name of at least one character
        when <~{name: <'.+'>}> do 'Please give a name' !

        when <{name: <=$game.players(1).name>}> do
          // If the input contains a move, add it or update it
          $ -> \(<hasMove> $.move !\) -> ..|@GameService($id).players(1): (move: $);
          $getStatus&{id: $id} !

        // there is currently only one player
        when <?($game.players <[](1)>)> do
          ..|@GameService($id).players: {name: $.name, $ -> \(<hasMove> $.move !\) -> (move: $)};
            $getStatus&{id: $id} !

        when <{name: <=$game.players(2).name>}> do
          $ -> \(<hasMove> $.move !\) -> ..|@GameService($id).players(2): (move: $);
          $getStatus&{id: $id} !

        otherwise 'The game is already full' !
      \) !
    otherwise '' !
  end updateGame
end GameService

test 'simple game'
  def service: $GameService;
  def createResponse: {name: 'A', move: 'rock'} -> service::createGame;
  assert $createResponse <{id:<>, status:<='A is waiting for an opponent'>}> 'create returns id and status'

  assert {name: 'B', move: 'paper'} -> service::updateGame&{id: $createResponse.id}
    <{id:<=$createResponse.id>, status:<='B wins'>}> 'join resolves game'
end 'simple game'

test 'add move later and change it'
  def service: $GameService;
  def createResponse: {name: 'A'} -> service::createGame;

  assert {name: 'A', move: 'paper'} -> service::updateGame&{id: $createResponse.id}
    <{id:<=$createResponse.id>, status:<='A is waiting for an opponent'>}> 'A makes move'

  assert {name: 'A', move: 'rock'} -> service::updateGame&{id: $createResponse.id}
    <{id:<=$createResponse.id>, status:<='A is waiting for an opponent'>}> 'A can change move'
end 'add move later and change it'

test 'try illegal move'
  def service: $GameService;
  assert {name: 'A', move: 'camel'} -> service::createGame
    <='camel is not a recognized move. Please pick one of [rock, paper, scissors, spock, lizard]'> 'illegal move'
end 'try illegal move'